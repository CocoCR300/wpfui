<!--
    This Source Code Form is subject to the terms of the MIT License.
    If a copy of the MIT was not distributed with this file, You can obtain one at https://opensource.org/licenses/MIT.
    Copyright (C) Leszek Pomianowski and WPF UI Contributors.
    All Rights Reserved.
-->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:Wpf.Ui.Controls" xmlns:converters="clr-namespace:Wpf.Ui.Converters">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="ColorPickerSlider.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <converters:CornerRadiusDoubleValueConverter x:Key="CornerRadiusDoubleValueConverter" />

    <Style TargetType="controls:ColorSpectrum">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:ColorSpectrum">
                    <Grid Name="LayoutRoot">
                        <Grid x:Name="SizingGrid" HorizontalAlignment="Center" VerticalAlignment="Center">
                            <Grid.Clip>
                                <RectangleGeometry />
                            </Grid.Clip>
                            <Rectangle x:Name="SpectrumRectangle" IsHitTestVisible="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                       RadiusX="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusDoubleValueConverter}, ConverterParameter={x:Static converters:CornerRadiusOption.TopLeft}}"
                                       RadiusY="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusDoubleValueConverter}, ConverterParameter={x:Static converters:CornerRadiusOption.BottomRight}}" />
                            <Rectangle x:Name="SpectrumOverlayRectangle" IsHitTestVisible="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                       RadiusX="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusDoubleValueConverter}, ConverterParameter={x:Static converters:CornerRadiusOption.TopLeft}}"
                                       RadiusY="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusDoubleValueConverter}, ConverterParameter={x:Static converters:CornerRadiusOption.BottomRight}}" />
                            <Ellipse x:Name="SpectrumEllipse" IsHitTestVisible="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="Collapsed"/>
                            <Ellipse x:Name="SpectrumOverlayEllipse" IsHitTestVisible="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="Collapsed"/>
                            <Canvas x:Name="InputTarget" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                <!-- Canvas Control.IsTemplateFocusTarget="True" -->
                                <Grid x:Name="SelectionEllipsePanel" Width="16" Height="16">
                                    <!--<Ellipse x:Name="FocusEllipse" Stroke="{DynamicResource TextFillColorDarkPrimaryBrush}" Margin="-2" StrokeThickness="2" IsHitTestVisible="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="Collapsed" />-->
                                    <Ellipse x:Name="SelectionEllipse" Stroke="{DynamicResource TextFillColorDarkPrimaryBrush}" StrokeThickness="2" IsHitTestVisible="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                    </Ellipse>
                                    <Grid.ToolTip>
                                        <ToolTip HasDropShadow="True" Name="ColorNameToolTip" Placement="Top"
                                                 PlacementTarget="{x:Reference InputTarget}" PlacementRectangle="0,0,0,0" />
                                    </Grid.ToolTip>
                                </Grid>
                            </Canvas>
                            <Rectangle x:Name="RectangleBorder" Style="{DynamicResource ColorPickerBorder}" IsHitTestVisible="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                       RadiusX="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusDoubleValueConverter}, ConverterParameter={x:Static converters:CornerRadiusOption.TopLeft}}"
                                       RadiusY="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusDoubleValueConverter}, ConverterParameter={x:Static converters:CornerRadiusOption.BottomRight}}"  />
                            <Ellipse x:Name="EllipseBorder" Style="{DynamicResource ColorPickerBorder}" IsHitTestVisible="False" Visibility="Collapsed" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="ShouldShowLargeSelection" Value="True">
                            <Setter Property="Height" TargetName="SelectionEllipsePanel" Value="48"/>
                            <Setter Property="Width"  TargetName="SelectionEllipsePanel" Value="48"/>
                        </Trigger>
                        
                        <Trigger Property="SelectionEllipseShouldBeLight" Value="True">
                            <!--<Setter Property="Stroke" TargetName="FocusEllipse" Value="{DynamicResource TextFillColorLightPrimaryBrush}"/>-->
                            <Setter Property="Stroke" TargetName="SelectionEllipse" Value="{DynamicResource TextFillColorLightPrimaryBrush}"/>
                        </Trigger>
                        
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="SelectionEllipse" Value="0.8" />
                        </Trigger>

                        <Trigger Property="Shape" Value="Ring">
                            <Setter Property="Visibility" TargetName="SpectrumRectangle" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="SpectrumOverlayRectangle" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="RectangleBorder" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="SpectrumEllipse" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="SpectrumOverlayEllipse" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="EllipseBorder" Value="Visible"/>
                        </Trigger>

                        <!-- TODO: IsKeyboardFocused is also true when the focus is from the pointer -->
                        <!--<Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Visibility" TargetName="FocusEllipse" Value="Visible" />
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>